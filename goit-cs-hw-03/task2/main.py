from pymongo import MongoClient
from pymongo.errors import PyMongoError
from bson.objectid import ObjectId


MONGO_URI = "mongodb+srv://dezzly21:dezzly21@cluster0.mz8wvko.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(MONGO_URI)
db = client["cat_database"]
collection = db["cats"]

db = client.cats

if collection.count_documents({}) == 0:
    many_cats = collection.insert_many([
        {"name": "Lama", "age": 2, "features": ["—Ö–æ–¥–∏—Ç—å –≤ –ª–æ—Ç–æ–∫", "–Ω–µ –¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "—Å—ñ—Ä–∏–π"]},
        {"name": "Liza", "age": 4, "features": ["—Ö–æ–¥–∏—Ç—å –≤ –ª–æ—Ç–æ–∫", "–¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "–±—ñ–ª–∏–π"]},
        {"name": "Boris", "age": 12, "features": ["—Ö–æ–¥–∏—Ç—å –≤ –ª–æ—Ç–æ–∫", "–Ω–µ –¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "—Å—ñ—Ä–∏–π"]},
        {"name": "Murik", "age": 1, "features": ["—Ö–æ–¥–∏—Ç—å –≤ –ª–æ—Ç–æ–∫", "–¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "—á–æ—Ä–Ω–∏–π"]}
    ])
    print("‚úÖ –ö–æ—Ç–∏ –¥–æ–¥–∞–Ω—ñ –¥–æ –±–∞–∑–∏.")
else:
    print("‚ÑπÔ∏è –ö–æ—Ç–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å —É –±–∞–∑—ñ.")

def read_all_cats():
    try:
        cats = list(collection.find())
        if not cats:
            print("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è.")
        for cat in cats:
            print(cat)
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ: {e}")


# üìñ READ: –ó–Ω–∞–π—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º
def find_cat_by_name(name):
    try:
        cat = collection.find_one({"name": name})
        if cat:
            print(cat)
        else:
            print(f"–ö—ñ—Ç –∑ —ñ–º–µ–Ω–µ–º {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")


# üÜï CREATE: –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞
def create_cat(name, age, features):
    try:
        result = collection.insert_one({
            "name": name,
            "age": age,
            "features": features
        })
        print(f"–ö–æ—Ç–∞ –¥–æ–¥–∞–Ω–æ –∑ ID: {result.inserted_id}")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")


# üîÅ UPDATE: –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–∫ –∫–æ—Ç–∞
def update_cat_age(name, new_age):
    try:
        result = collection.update_one({"name": name}, {"$set": {"age": new_age}})
        if result.modified_count:
            print(f"–í—ñ–∫ –∫–æ—Ç–∞ {name} –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            print(f"–ö–æ—Ç–∞ –∑ —ñ–º'—è–º {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∫—É: {e}")


# üîÅ UPDATE: –î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
def add_feature_to_cat(name, new_feature):
    try:
        result = collection.update_one({"name": name}, {"$addToSet": {"features": new_feature}})
        if result.modified_count:
            print(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–æ–¥–∞–Ω–æ –∫–æ—Ç—É {name}.")
        else:
            print(f"–ö–æ—Ç–∞ –∑ —ñ–º'—è–º {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")


# ‚ùå DELETE: –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º
def delete_cat_by_name(name):
    try:
        result = collection.delete_one({"name": name})
        if result.deleted_count:
            print(f"–ö–æ—Ç–∞ {name} –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            print(f"–ö–æ—Ç–∞ –∑ —ñ–º'—è–º {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")


# ‚ùå DELETE: –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤
def delete_all_cats():
    try:
        result = collection.delete_many({})
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∑–∞–ø–∏—Å—ñ–≤.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤: {e}")



def menu():
    while True:
        print("\n--- –ú–µ–Ω—é ---")
        print("1. –í–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
        print("2. –ó–Ω–∞–π—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º")
        print("3. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞")
        print("4. –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–∫ –∫–æ—Ç–∞")
        print("5. –î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫–æ—Ç—É")
        print("6. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º")
        print("7. –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ç—ñ–≤")
        print("0. –í–∏—Ö—ñ–¥")

        choice = input("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ")

        if choice == "1":
            read_all_cats()
        elif choice == "2":
            name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ç–∞: ")
            find_cat_by_name(name)
        elif choice == "3":
            name = input("–Ü–º'—è: ")
            age = int(input("–í—ñ–∫: "))
            features = input("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É): ").split(",")
            create_cat(name, age, [f.strip() for f in features])
        elif choice == "4":
            name = input("–Ü–º'—è –∫–æ—Ç–∞: ")
            new_age = int(input("–ù–æ–≤–∏–π –≤—ñ–∫: "))
            update_cat_age(name, new_age)
        elif choice == "5":
            name = input("–Ü–º'—è –∫–æ—Ç–∞: ")
            feature = input("–ù–æ–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ")
            add_feature_to_cat(name, feature.strip())
        elif choice == "6":
            name = input("–Ü–º'—è –∫–æ—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
            delete_cat_by_name(name)
        elif choice == "7":
            confirm = input("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ? (—Ç–∞–∫/–Ω—ñ): ")
            if confirm.lower() == "—Ç–∞–∫":
                delete_all_cats()
        elif choice == "0":
            break
        else:
            print("–ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")


if __name__ == "__main__":
    menu()